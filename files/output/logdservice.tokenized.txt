TokenWithLocation { token: Comment("// Licensed under the Apache License, Version 2.0 (the \"License\");"), location: Location { line: 2, column: 1 } },
TokenWithLocation { token: Comment("// you may not use this file except in compliance with the License."), location: Location { line: 4, column: 1 } },
TokenWithLocation { token: Comment("// You may obtain a copy of the License at"), location: Location { line: 6, column: 1 } },
TokenWithLocation { token: Comment("//"), location: Location { line: 8, column: 1 } },
TokenWithLocation { token: Comment("//     http://www.apache.org/licenses/LICENSE-2.0"), location: Location { line: 10, column: 1 } },
TokenWithLocation { token: Comment("//"), location: Location { line: 12, column: 1 } },
TokenWithLocation { token: Comment("// Unless required by applicable law or agreed to in writing, software"), location: Location { line: 14, column: 1 } },
TokenWithLocation { token: Comment("// distributed under the License is distributed on an \"AS IS\" BASIS,"), location: Location { line: 16, column: 1 } },
TokenWithLocation { token: Comment("// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."), location: Location { line: 18, column: 1 } },
TokenWithLocation { token: Comment("// See the License for the specific language governing permissions and"), location: Location { line: 20, column: 1 } },
TokenWithLocation { token: Comment("// limitations under the License."), location: Location { line: 22, column: 1 } },
TokenWithLocation { token: Syntax, location: Location { line: 24, column: 1 } },
TokenWithLocation { token: Equals, location: Location { line: 24, column: 8 } },
TokenWithLocation { token: StringLiteral("proto3"), location: Location { line: 24, column: 10 } },
TokenWithLocation { token: Semicolon, location: Location { line: 24, column: 18 } },
TokenWithLocation { token: Option, location: Location { line: 26, column: 1 } },
TokenWithLocation { token: Identifier("java_multiple_files"), location: Location { line: 26, column: 8 } },
TokenWithLocation { token: Equals, location: Location { line: 26, column: 28 } },
TokenWithLocation { token: Identifier("true"), location: Location { line: 26, column: 30 } },
TokenWithLocation { token: Semicolon, location: Location { line: 26, column: 34 } },
TokenWithLocation { token: Option, location: Location { line: 27, column: 1 } },
TokenWithLocation { token: Identifier("java_package"), location: Location { line: 27, column: 8 } },
TokenWithLocation { token: Equals, location: Location { line: 27, column: 21 } },
TokenWithLocation { token: StringLiteral("com.facebook.buck.logd.proto"), location: Location { line: 27, column: 23 } },
TokenWithLocation { token: Semicolon, location: Location { line: 27, column: 53 } },
TokenWithLocation { token: Option, location: Location { line: 28, column: 1 } },
TokenWithLocation { token: Identifier("java_outer_classname"), location: Location { line: 28, column: 8 } },
TokenWithLocation { token: Equals, location: Location { line: 28, column: 29 } },
TokenWithLocation { token: StringLiteral("LogdServiceOuterFile"), location: Location { line: 28, column: 31 } },
TokenWithLocation { token: Semicolon, location: Location { line: 28, column: 53 } },
TokenWithLocation { token: Comment("// best practices to include version number in package"), location: Location { line: 31, column: 1 } },
TokenWithLocation { token: Package, location: Location { line: 32, column: 1 } },
TokenWithLocation { token: Identifier("logd"), location: Location { line: 32, column: 9 } },
TokenWithLocation { token: Dot, location: Location { line: 32, column: 13 } },
TokenWithLocation { token: Identifier("v1"), location: Location { line: 32, column: 14 } },
TokenWithLocation { token: Semicolon, location: Location { line: 32, column: 16 } },
TokenWithLocation { token: Import, location: Location { line: 34, column: 1 } },
TokenWithLocation { token: StringLiteral("third-party/java/remote-apis/google/rpc/status.proto"), location: Location { line: 34, column: 8 } },
TokenWithLocation { token: Semicolon, location: Location { line: 34, column: 62 } },
TokenWithLocation { token: Comment("// Request message for [LogdService.CreateLogFile] to request a log file be created"), location: Location { line: 37, column: 1 } },
TokenWithLocation { token: Comment("// in file-system and/or storage"), location: Location { line: 39, column: 1 } },
TokenWithLocation { token: Message, location: Location { line: 40, column: 1 } },
TokenWithLocation { token: Identifier("CreateLogRequest"), location: Location { line: 40, column: 9 } },
TokenWithLocation { token: OpenBrace, location: Location { line: 40, column: 26 } },
TokenWithLocation { token: Comment("// path to which log will be streamed by logD"), location: Location { line: 42, column: 5 } },
TokenWithLocation { token: Identifier("string"), location: Location { line: 43, column: 5 } },
TokenWithLocation { token: Identifier("logFilePath"), location: Location { line: 43, column: 12 } },
TokenWithLocation { token: Equals, location: Location { line: 43, column: 24 } },
TokenWithLocation { token: IntLiteral(1), location: Location { line: 43, column: 26 } },
TokenWithLocation { token: Semicolon, location: Location { line: 43, column: 27 } },
TokenWithLocation { token: Comment("// enum specifying existing types of log"), location: Location { line: 45, column: 5 } },
TokenWithLocation { token: Identifier("LogType"), location: Location { line: 46, column: 5 } },
TokenWithLocation { token: Identifier("logType"), location: Location { line: 46, column: 13 } },
TokenWithLocation { token: Equals, location: Location { line: 46, column: 21 } },
TokenWithLocation { token: IntLiteral(2), location: Location { line: 46, column: 23 } },
TokenWithLocation { token: Semicolon, location: Location { line: 46, column: 24 } },
TokenWithLocation { token: CloseBrace, location: Location { line: 47, column: 1 } },
TokenWithLocation { token: Comment("// Response message for [LogdService.CreateLogFile]"), location: Location { line: 50, column: 1 } },
TokenWithLocation { token: Comment("// LogD returns client with a log file identifier"), location: Location { line: 52, column: 1 } },
TokenWithLocation { token: Message, location: Location { line: 53, column: 1 } },
TokenWithLocation { token: Identifier("CreateLogResponse"), location: Location { line: 53, column: 9 } },
TokenWithLocation { token: OpenBrace, location: Location { line: 53, column: 27 } },
TokenWithLocation { token: Comment("// generated id for the log file path requested by client"), location: Location { line: 55, column: 5 } },
TokenWithLocation { token: Identifier("int32"), location: Location { line: 56, column: 5 } },
TokenWithLocation { token: Identifier("logId"), location: Location { line: 56, column: 11 } },
TokenWithLocation { token: Equals, location: Location { line: 56, column: 17 } },
TokenWithLocation { token: IntLiteral(1), location: Location { line: 56, column: 19 } },
TokenWithLocation { token: Semicolon, location: Location { line: 56, column: 20 } },
TokenWithLocation { token: CloseBrace, location: Location { line: 57, column: 1 } },
TokenWithLocation { token: Comment("// LogMessage(s) for [LogdService.OpenLog]"), location: Location { line: 60, column: 1 } },
TokenWithLocation { token: Comment("// Client streams LogMessage(s) to logD, where logD writes to corresponding log file identified by logId"), location: Location { line: 62, column: 1 } },
TokenWithLocation { token: Message, location: Location { line: 63, column: 1 } },
TokenWithLocation { token: Identifier("LogMessage"), location: Location { line: 63, column: 9 } },
TokenWithLocation { token: OpenBrace, location: Location { line: 63, column: 20 } },
TokenWithLocation { token: Comment("// log file identifier for logD"), location: Location { line: 65, column: 5 } },
TokenWithLocation { token: Identifier("int32"), location: Location { line: 66, column: 5 } },
TokenWithLocation { token: Identifier("logId"), location: Location { line: 66, column: 11 } },
TokenWithLocation { token: Equals, location: Location { line: 66, column: 17 } },
TokenWithLocation { token: IntLiteral(1), location: Location { line: 66, column: 19 } },
TokenWithLocation { token: Semicolon, location: Location { line: 66, column: 20 } },
TokenWithLocation { token: Comment("// log content"), location: Location { line: 68, column: 5 } },
TokenWithLocation { token: Identifier("string"), location: Location { line: 69, column: 5 } },
TokenWithLocation { token: Identifier("logMessage"), location: Location { line: 69, column: 12 } },
TokenWithLocation { token: Equals, location: Location { line: 69, column: 23 } },
TokenWithLocation { token: IntLiteral(2), location: Location { line: 69, column: 25 } },
TokenWithLocation { token: Semicolon, location: Location { line: 69, column: 26 } },
TokenWithLocation { token: CloseBrace, location: Location { line: 70, column: 1 } },
TokenWithLocation { token: Comment("// Existing types of logs we are currently maintaining. To be revised/extended."), location: Location { line: 73, column: 1 } },
TokenWithLocation { token: Enum, location: Location { line: 74, column: 1 } },
TokenWithLocation { token: Identifier("LogType"), location: Location { line: 74, column: 6 } },
TokenWithLocation { token: OpenBrace, location: Location { line: 74, column: 14 } },
TokenWithLocation { token: Identifier("BUCK_LOG"), location: Location { line: 75, column: 5 } },
TokenWithLocation { token: Equals, location: Location { line: 75, column: 14 } },
TokenWithLocation { token: IntLiteral(0), location: Location { line: 75, column: 16 } },
TokenWithLocation { token: Semicolon, location: Location { line: 75, column: 17 } },
TokenWithLocation { token: Identifier("BUCK_MACHINE_LOG"), location: Location { line: 76, column: 5 } },
TokenWithLocation { token: Equals, location: Location { line: 76, column: 22 } },
TokenWithLocation { token: IntLiteral(1), location: Location { line: 76, column: 24 } },
TokenWithLocation { token: Semicolon, location: Location { line: 76, column: 25 } },
TokenWithLocation { token: Identifier("CHROME_TRACE_LOG"), location: Location { line: 77, column: 5 } },
TokenWithLocation { token: Equals, location: Location { line: 77, column: 22 } },
TokenWithLocation { token: IntLiteral(2), location: Location { line: 77, column: 24 } },
TokenWithLocation { token: Semicolon, location: Location { line: 77, column: 25 } },
TokenWithLocation { token: Identifier("SIMPLE_CONSOLE_LOG"), location: Location { line: 78, column: 5 } },
TokenWithLocation { token: Equals, location: Location { line: 78, column: 24 } },
TokenWithLocation { token: IntLiteral(3), location: Location { line: 78, column: 26 } },
TokenWithLocation { token: Semicolon, location: Location { line: 78, column: 27 } },
TokenWithLocation { token: Identifier("CRITICAL_PATH_LOG"), location: Location { line: 79, column: 5 } },
TokenWithLocation { token: Equals, location: Location { line: 79, column: 23 } },
TokenWithLocation { token: IntLiteral(4), location: Location { line: 79, column: 25 } },
TokenWithLocation { token: Semicolon, location: Location { line: 79, column: 26 } },
TokenWithLocation { token: Identifier("RULE_KEY_LOG"), location: Location { line: 80, column: 5 } },
TokenWithLocation { token: Equals, location: Location { line: 80, column: 18 } },
TokenWithLocation { token: IntLiteral(5), location: Location { line: 80, column: 20 } },
TokenWithLocation { token: Semicolon, location: Location { line: 80, column: 21 } },
TokenWithLocation { token: CloseBrace, location: Location { line: 81, column: 1 } },
TokenWithLocation { token: Comment("// Manages LogdService APIs"), location: Location { line: 84, column: 1 } },
TokenWithLocation { token: Service, location: Location { line: 85, column: 1 } },
TokenWithLocation { token: Identifier("LogdService"), location: Location { line: 85, column: 9 } },
TokenWithLocation { token: OpenBrace, location: Location { line: 85, column: 21 } },
TokenWithLocation { token: Comment("// A simple, unary RPC."), location: Location { line: 88, column: 6 } },
TokenWithLocation { token: Comment("//"), location: Location { line: 90, column: 6 } },
TokenWithLocation { token: Comment("// Client sends a CreateLogRequest to logD, after which logD creates a corresponding log file in"), location: Location { line: 92, column: 6 } },
TokenWithLocation { token: Comment("// file-system and/or storage and returns a CreateLogResponse with a generated id."), location: Location { line: 94, column: 6 } },
TokenWithLocation { token: Rpc, location: Location { line: 95, column: 5 } },
TokenWithLocation { token: Identifier("CreateLogFile"), location: Location { line: 95, column: 9 } },
TokenWithLocation { token: OpenParen, location: Location { line: 95, column: 22 } },
TokenWithLocation { token: Identifier("CreateLogRequest"), location: Location { line: 95, column: 23 } },
TokenWithLocation { token: CloseParen, location: Location { line: 95, column: 39 } },
TokenWithLocation { token: Returns, location: Location { line: 95, column: 41 } },
TokenWithLocation { token: OpenParen, location: Location { line: 95, column: 49 } },
TokenWithLocation { token: Identifier("CreateLogResponse"), location: Location { line: 95, column: 50 } },
TokenWithLocation { token: CloseParen, location: Location { line: 95, column: 67 } },
TokenWithLocation { token: OpenBrace, location: Location { line: 95, column: 69 } },
TokenWithLocation { token: CloseBrace, location: Location { line: 95, column: 70 } },
TokenWithLocation { token: Comment("// A client-to-server streaming RPC."), location: Location { line: 98, column: 6 } },
TokenWithLocation { token: Comment("//"), location: Location { line: 100, column: 6 } },
TokenWithLocation { token: Comment("// Upon receiving a logId that corresponds with a log file created by logD, client can proceed to"), location: Location { line: 102, column: 6 } },
TokenWithLocation { token: Comment("// stream LogMessage(s) to logD."), location: Location { line: 104, column: 6 } },
TokenWithLocation { token: Comment("//"), location: Location { line: 106, column: 6 } },
TokenWithLocation { token: Comment("// After receiving an OpenLog call from client, logD will"), location: Location { line: 108, column: 6 } },
TokenWithLocation { token: Comment("// proceed to open a writer stream to the log file identified by logId"), location: Location { line: 110, column: 6 } },
TokenWithLocation { token: Comment("// and return a StreamObserver that can observe and process incoming logs from client."), location: Location { line: 112, column: 6 } },
TokenWithLocation { token: Comment("// Client can then use the returned StreamObserver to stream LogMessages to logD."), location: Location { line: 114, column: 6 } },
TokenWithLocation { token: Comment("//"), location: Location { line: 116, column: 6 } },
TokenWithLocation { token: Comment("// After the client finishes sending logs, it should call onCompleted() on the returned"), location: Location { line: 118, column: 6 } },
TokenWithLocation { token: Comment("// StreamObserver to signal logD to close the corresponding writer stream to log file."), location: Location { line: 120, column: 6 } },
TokenWithLocation { token: Rpc, location: Location { line: 121, column: 5 } },
TokenWithLocation { token: Identifier("OpenLog"), location: Location { line: 121, column: 9 } },
TokenWithLocation { token: OpenParen, location: Location { line: 121, column: 16 } },
TokenWithLocation { token: Stream, location: Location { line: 121, column: 17 } },
TokenWithLocation { token: Identifier("LogMessage"), location: Location { line: 121, column: 24 } },
TokenWithLocation { token: CloseParen, location: Location { line: 121, column: 34 } },
TokenWithLocation { token: Returns, location: Location { line: 121, column: 36 } },
TokenWithLocation { token: OpenParen, location: Location { line: 121, column: 44 } },
TokenWithLocation { token: Identifier("google"), location: Location { line: 121, column: 45 } },
TokenWithLocation { token: Dot, location: Location { line: 121, column: 51 } },
TokenWithLocation { token: Rpc, location: Location { line: 121, column: 52 } },
TokenWithLocation { token: Dot, location: Location { line: 121, column: 55 } },
TokenWithLocation { token: Identifier("Status"), location: Location { line: 121, column: 56 } },
TokenWithLocation { token: CloseParen, location: Location { line: 121, column: 62 } },
TokenWithLocation { token: OpenBrace, location: Location { line: 121, column: 64 } },
TokenWithLocation { token: CloseBrace, location: Location { line: 121, column: 65 } },
TokenWithLocation { token: CloseBrace, location: Location { line: 122, column: 1 } }
